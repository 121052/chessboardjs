{
"Config Object":[
"------------------------------------------------------------------------------",
{
  "name":"initialList",
  "type":"String",
  "req":"sometimes",
  "default":false,
  "desc":[
    "The <code class='js plain'>initialList</code> property is the first list started when the user clicks on the AutoComplete widget.",
    "It's value should be the name of a <a href='docs#list_object'>List Object</a>.",
    "<code class='js plain'>initialList</code> is required when there are more than one List Objects on <a href='docs#config_object:lists'><code class='js plain'>config.lists</code></a>."
  ],
  "examples":[1002,1003]
},
"------------------------------------------------------------------------------",
{
  "name":"initialValue",
  "type":"Array of<br /><a href='docs#token_object'>Token Groups</a>",
  "req":false,
  "default":false,
  "desc":[
    "If provided, sets the initial value of the AutoComplete widget."
  ],
  "examples":[3000]
},
"------------------------------------------------------------------------------",
{
  "name":"lists",
  "type":"Object of<br /><a href='docs#list_object'>List Objects</a>",
  "req":true,
  "default":false,
  "desc":[
    "The <code class='js plain'>lists</code> property contains all of the lists used to power the dropdown options.",
    "<code class='js plain'>lists</code> should be an object where the property values are the names of lists, and the values are <a href='docs#list_object'>List Objects</a>."
  ],
  "examples":[1002,1003]
},
"------------------------------------------------------------------------------",
{
  "name":"maxTokenGroups",
  "type":["Number","<code class='js keyword'>false</code>"],
  "req":false,
  "default":"<code class='js keyword'>false</code>",
  "desc":[
    "The maximum number of Token Groups allowed in the search bar.",
    "Set <code class='js plain'>maxTokenGroups</code> to <code class='js keyword'>false</code> to allow unlimited <a href='docs#token_object'>Token Groups</a>."
  ],
  "examples":[3001]
},
"------------------------------------------------------------------------------",
{
  "name":"onChange",
  "type":"Function",
  "req":false,
  "default":false,
  "desc":[
    "Function to execute when the value of the widget changes.",
    "The first argument to the function is the new value of the widget, the second argument is the old value of the widget.",
    "If this function returns a valid widget value, then that value becomes the value of the widget.  If not, the original new value becomes the value of the widget."
  ],
  "examples":[6000,6001]
},
"------------------------------------------------------------------------------",
{
  "name":"placeholderHTML",
  "type":"String",
  "req":false,
  "default":"<code class='js string'>''</code>",
  "desc":[
    "A placeholder to show in the AutoComplete widget when there are no Token Groups."
  ],
  "examples":3005
},
"------------------------------------------------------------------------------",
{
  "name":"showErrors",
  "type":["<code class='js keyword'>false</code>","String","Function"],
  "req":false,
  "default":false,
  "desc":[
    "<code class='js plain'>showErrors</code> is an optional parameter to control how AutoComplete reports errors.",
    "Every error in AutoComplete has a <a href='docs#errors'>unique code</a> to help diagnose problems and search for solutions.",
    "If <code class='js plain'>showErrors</code> is <code class='js keyword'>false</code> then errors will be ignored.",
    "If <code class='js plain'>showErrors</code> is <code class='js string'>'console'</code> then errors will be sent to <code class='js plain'>console.log()</code>.",
    "If <code class='js plain'>showErrors</code> is <code class='js string'>'alert'</code> then errors will be sent to <code class='js plain'>window.alert()</code>.",
    "If <code class='js plain'>showErrors</code> is a function then the first argument is the unique error code, the second argument is an error string, and an optional third argument is a data structure that is relevant to the error."
  ],
  "examples":[3012,3088]
},
"------------------------------------------------------------------------------",
{
  "name":"tokenSeparatorHTML",
  "type":["String","Function"],
  "req":false,
  "default":"<code class='js string'>':'</code>",
  "desc":[
    "The HTML string to put between <a href='docs#token_object'>Tokens</a> in the search bar.",
    "If <code class='js plain'>tokenSeparatorHTML</code> is a function the first argument is the Token Object to the left of the separator, the second argument is the Token Object to the right.",
    "The function should return an HTML string."
  ],
  "examples":[3015,3016]
},
"------------------------------------------------------------------------------"
],







"Methods":[
"------------------------------------------------------------------------------",
{
  "name":"addOption(name, option)",
  "args":[
    ["name", "name of the list to add the option to"],
    ["option", "<a href='docs#option_object'>Option Object</a> to add to the list"]
  ],
  "desc":[
    "Add an option to a <a href='docs#list_object'>List Object</a>.",
    "Returns <code class='js keyword'>true</code> if adding the option was successful.",
    "Returns <code class='js keyword'>false</code> otherwise."
  ],
  "examples":7000
},
"------------------------------------------------------------------------------",
{
  "name":"blur()",
  "desc":"Remove focus from the widget.",
  "examples":[7001,7056]
},
"------------------------------------------------------------------------------",
{
  "name":"clear()",
  "desc":[
    "Clear the value of the widget.",
    "Has the same effect as calling <code class='js plain'>setValue([])</code>"
  ],
  "examples":7002
},
"------------------------------------------------------------------------------",
{
  "name":"destroy()",
  "desc":"Remove the widget from the DOM.",
  "examples":7003
},
"------------------------------------------------------------------------------",
{
  "name":"focus()",
  "desc":"Puts the input focus on the widget.",
  "examples":7004
},
"------------------------------------------------------------------------------",
{
  "name":"getList(name)",
  "args":[
    ["name", "name of the list to get"]
  ],
  "desc":[
    "Returns the <a href='docs#list_object'>List Object</a> if it exists.",
    "Returns <code class='js keyword'>false</code> if the list does not exist."
  ],
  "examples":7005
},
"------------------------------------------------------------------------------",
{
  "name":"getLists()",
  "desc":"Returns an object of all the <a href='docs#list_object'>List Objects</a>.",
  "examples":7006
},
"------------------------------------------------------------------------------",
{
  "name":"getValue()",
  "desc":[
    "Returns the current value of the widget.",
    "Returns an empty array if the widget has no Token Groups."
  ],
  "examples":7007
},
"------------------------------------------------------------------------------",
{
  "name":"list(name)",
  "args":[
    ["name", "name of the list to get"]
  ],
  "desc":"Alias of <a href='docs#methods:getList'><code class='js plain'>getList(name)</code></a>"
},
"------------------------------------------------------------------------------",
{
  "noId":true,
  "name":"list(name, list)",
  "args":[
    ["name", "name of the list to add or update"],
    ["list", "<a href='docs#list_object'>List Object</a>"]
  ],
  "desc":"Alias of <a href='docs#methods:setList'><code class='js plain'>setList(name, list)</code></a>"
},
"------------------------------------------------------------------------------",
{
  "name":"pressDown()",
  "desc":[
    "Simulates the user pressing the \"Down Arrow\" key on the input field.",
    "Has no effect if the input field does not have focus."
  ],
  "examples":7056
},
"------------------------------------------------------------------------------",
{
  "name":"pressEnter()",
  "desc":[
    "Simulates the user pressing the \"Enter\" key on the input field.",
    "Has no effect if the input field does not have focus."
  ],
  "examples":7056
},
"------------------------------------------------------------------------------",
{
  "name":"pressUp()",
  "desc":[
    "Simulates the user pressing the \"Up Arrow\" key on the input field.",
    "Has no effect if the input field does not have focus."
  ],
  "examples":7056
},
"------------------------------------------------------------------------------",
{
  "name":"removeList(name)",
  "args":[
    ["name", "name of the list to remove"]
  ],
  "desc":[
    "Returns <code class='js keyword'>true</code> if the list was removed.",
    "Returns <code class='js keyword'>false</code> if not.",
    "You cannot remove the <a href='docs#config_object:initialList'><code class='js plain'>initialList</code></a>."
  ],
  "examples":7008
},
"------------------------------------------------------------------------------",
{
  "name":"removeTokenGroup(index)",
  "args":[
    ["index", "zero-based index of the <a href='docs#token_object'>Token Group</a> to remove"]
  ],
  "desc":[
    "Remove a <a href='docs#token_object'>Token Group</a> by array index.",
    "Returns the updated value of the widget if successful.",
    "Returns <code class='js keyword'>false</code> otherwise."
  ],
  "examples":7009
},
"------------------------------------------------------------------------------",
{
  "name":"setInput(input)",
  "args":[
    ["input", "text to set the input element to"]
  ],
  "desc":[
    "Puts text into the input element as if the user had typed it.",
    "Returns <code class='js keyword'>true</code> and updates the widget if updating the input was successful.",
    "Returns <code class='js keyword'>false</code> otherwise."
  ],
  "examples":7056
},
"------------------------------------------------------------------------------",
{
  "name":"setList(name, list)",
  "args":[
    ["name", "name of the list to add or update"],
    ["list", "<a href='docs#list_object'>List Object</a>"]
  ],
  "desc":[
    "Adds a new list or updates an existing list.",
    "Returns <code class='js keyword'>true</code> if adding the list was successful.",
    "Returns <code class='js keyword'>false</code> otherwise."
  ],
  "examples":7010
},
"------------------------------------------------------------------------------",
{
  "name":"setValue(value)",
  "args":[
    ["value", "array of <a href='docs#token_object'>Token Groups</a>"]
  ],
  "desc":[
    "Returns <code class='js keyword'>true</code> and updates the widget if <code class='js plain'>value</code> is valid.",
    "Returns <code class='js keyword'>false</code> otherwise."
  ],
  "examples":7011
},
"------------------------------------------------------------------------------",
{
  "name":"val()",
  "desc":"Alias of <a href='docs#methods:getValue'><code class='js plain'>getValue()</code></a>"
},
"------------------------------------------------------------------------------",
{
  "noId":true,
  "name":"val(value)",
  "args":[
    ["value", "array of <a href='docs#token_object'>Token Groups</a>"]
  ],
  "desc":"Alias of <a href='docs#methods:setValue'><code class='js plain'>setValue(value)</code></a>"
},
"------------------------------------------------------------------------------"
],










"Errors":[
{
  "id":1001,
  "desc":"The first argument to ChessBoard() cannot be an empty string.",
  "fix":"The first argument to the ChessBoard() constructor should be the id of a DOM element or a reference to a single DOM element."
},
{
  "id":1002,
  "desc":"Element with id \"<id>\" does not exist in the DOM.",
  "fix":[
    "ChessBoard could not find your element with <code class='js plain'>document.getElementById</code>.",
    "Please note that if you pass a string as the first argument to the ChessBoard() constructor it should be the value of a DOM id, not a CSS selector (ie: <code class='js string'>\"board\"</code>, not <code class='js string'>\"#board\"</code>)."
  ]
},
{
  "id":1003,
  "desc":"The first argument to ChessBoard() must be an ID or a single DOM node.",
  "fix":"The first argument to the ChessBoard() constructor should be the id of a DOM element or a reference to a single DOM element."
},
{
  "id":1004,
  "desc":"JSON does not exist. Please include a JSON polyfill.",
  "fix":"ChessBoard requires a JSON implementation. Please include a <a href='http://bestiejs.github.com/json3/'>polyfill</a> for older browsers."
},
{
  "id":1005,
  "desc":"Unable to find a valid version of jQuery. Please include jQuery 1.4.2 or higher on the page.",
  "fix":"ChessBoard requires <a href='http://jquery.com/'>jQuery</a> version 1.4.2 or higher."
},
{
  "id":2826,
  "desc":"Invalid move passed to the move method.",
  "fix":"Moves must be a string in the form of <code class='js string'>'e2-e4'</code>, <code class='js string'>'b8-c6'</code>, etc."
},
{
  "id":5482,
  "desc":"Invalid value passed to the orientation method.",
  "fix":"The first argument to the orientation method must be <code class='js string'>'white'</code>, <code class='js string'>'black'</code>, or <code class='js string'>'flip'</code>."
},
{
  "id":6482,
  "desc":"Invalid value passed to the position method.",
  "fix":"Position must be either <code class='js string'>'start'</code>, a valid FEN String, or a valid Position Object."
},
{
  "id":7263,
  "desc":"Invalid value passed to config.position",
  "fix":"Position must either be <code class='js string'>'start'</code>, a valid FEN String, or a Position Object."
}
]

}